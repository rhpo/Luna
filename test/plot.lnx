
use "luna:console" as console

out fn plot f scale=({
    x: 0.1,
    y: 1
}) {

  { width, height } = console.size()

  origin = {
      x: math.int(width / 2),
      y: math.int(height / 2)
  }


  margin = 1

  # Method 2: make 2d array of screen [width, height], render it then print it to the console
  screen = range(height - margin).map(fn :y {
      range(width).map(fn :x {
          X = x - origin.x
          Fx = math.int(f(X * scale.x) * scale.y)

          if (x == origin.x) || (y == origin.y):
              "*"
          else if Fx == origin.y - y:
              "#"
          else
              " "
      })
  })

  console.clear()

  fn render screen {
      print(
            screen.map(fn :row {
                row.join("")
            }).join("\n")
      )
  }

  render(screen)

}

out fn animateScale f del=(10) {
    scale = { x: 0.1, y: 1 }
    max = 10
    step = 0.01


    range(2 * max).each(fn :i {
        if i == max:
          step *= -1

        plot(f, scale)
        scale.x = scale.x - step
        scale.y = scale.y - step
        sleep(del)
    })
}

# f = eval("use 'luna:math' as math lambda x: " + input("Enter a function: "))
# animateScale(f, 0)

